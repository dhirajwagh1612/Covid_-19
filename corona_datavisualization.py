# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ey9wUq09t0UNIBF4W1_aYGafCwOSUrsA
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import matplotlib.pyplot as plt 
import matplotlib.colors as mcolors
import pandas as pd 
import random
import math
import datetime 
from dateutil.parser import parse
# %matplotlib inline

data = pd.read_csv("/content/2019_nCoV_data.csv")
data.head()

"""# New Section

# New Section
"""

data.info()

adjusted_unique_dates = list(data['Last Update'].unique())
adjusted_unique_dates.sort()
adjusted_unique_dates

data.drop_duplicates(inplace=True)

data.replace('China', 'Mainland China', inplace=True)

data[data.Country == 'Mainland China']

excess_dates = []
for i in range(len(adjusted_unique_dates)):
    # assume the number of coronavirus cases, deaths, and recover increases over time 
    if i != 0:
        current_day_cases = data[data['Last Update']==adjusted_unique_dates[i]].Confirmed.sum()
        prev_day_cases = data[data['Last Update']==adjusted_unique_dates[i-1]].Confirmed.sum()
        current_day_deaths = data[data['Last Update']==adjusted_unique_dates[i]].Deaths.sum()
        prev_day_deaths = data[data['Last Update']==adjusted_unique_dates[i-1]].Deaths.sum()
        current_day_recovered = data[data['Last Update']==adjusted_unique_dates[i]].Recovered.sum()
        prev_day_recovered = data[data['Last Update']==adjusted_unique_dates[i-1]].Recovered.sum()
        
        if(current_day_cases < prev_day_cases or current_day_deaths < prev_day_deaths or current_day_recovered < prev_day_recovered):
            excess_dates.append(adjusted_unique_dates[i])
            # swap the current date with the previous date, it will get removed later
            temp = adjusted_unique_dates[i]
            adjusted_unique_dates[i] = adjusted_unique_dates[i-1]
            adjusted_unique_dates[i-1] = temp
            
for i in excess_dates:
    adjusted_unique_dates.remove(i)

world_cases = []
deaths = [] 
mortality_rate = []
recovered = [] 

for i in adjusted_unique_dates:
    confirmed_sum = data[data['Last Update']==i].Confirmed.sum()
    death_sum = data[data['Last Update']==i].Deaths.sum()
    recovered_sum = data[data['Last Update']==i].Recovered.sum()
    world_cases.append(confirmed_sum)
    deaths.append(death_sum)
    mortality_rate.append(death_sum/confirmed_sum)
    recovered.append(recovered_sum)

plt.figure(figsize=(20, 12))
plt.plot(adjusted_unique_dates, world_cases)
plt.title('# of Coronavirus Cases Over Time', size=30)
plt.xlabel('Time', size=30)
plt.ylabel('# of Cases', size=30)
plt.xticks(rotation=50, size=15)
plt.show()

plt.figure(figsize=(20, 12))
plt.plot(adjusted_unique_dates, deaths, color='red')
plt.title('# of Coronavirus Deaths Over Time', size=30)
plt.xlabel('Time', size=30)
plt.ylabel('# of Deaths', size=30)
plt.xticks(rotation=50, size=15)
plt.show()

mean_mortality_rate = np.mean(mortality_rate)
plt.figure(figsize=(20, 12))
plt.plot(adjusted_unique_dates, mortality_rate, color='orange')
plt.axhline(y = mean_mortality_rate,linestyle='--', color='black')
plt.title('Mortality Rate of Coronavirus Over Time', size=30)
plt.legend(['mortality rate', 'y='+str(mean_mortality_rate)])
plt.xlabel('Time', size=30)
plt.ylabel('Mortality Rate', size=30)
plt.xticks(rotation=50, size=15)
plt.show()

plt.figure(figsize=(20, 12))
plt.plot(adjusted_unique_dates, recovered, color='green')
plt.title('# of Coronavirus Cases Recovered Over Time', size=30)
plt.xlabel('Time', size=30)
plt.ylabel('# of Cases', size=30)
plt.xticks(rotation=50, size=15)
plt.show()

plt.figure(figsize=(20, 12))
plt.plot(adjusted_unique_dates, deaths, color='red')
plt.plot(adjusted_unique_dates, recovered, color='green')
plt.legend(['death', 'recovered'], loc='best', fontsize=20)
plt.title('# of Coronavirus Cases', size=30)
plt.xlabel('Time', size=30)
plt.ylabel('# of Cases', size=30)
plt.xticks(rotation=50, size=15)
plt.show()

plt.figure(figsize=(20, 12))
plt.plot(recovered, deaths)
plt.title('# of Coronavirus Deaths vs. # of Coronavirus Recoveries', size=30)
plt.xlabel('# of Coronavirus Recoveries', size=30)
plt.ylabel('# of Coronavirus Deaths', size=30)
plt.xticks(size=15)
plt.show()

unique_provinces =  data['Province/State'][data.Confirmed > 0].unique()
unique_provinces

province_confirmed_cases = []
for i in unique_provinces:
    province_confirmed_cases.append(data[data.Confirmed>0][data['Province/State']==i].Confirmed.max())

nan_indices = [] 

# handle nan if there is any, it is usually a float: float('nan')
for i in range(len(unique_provinces)):
    if type(unique_provinces[i]) == float:
        nan_indices.append(i)

unique_provinces = list(unique_provinces)
province_confirmed_cases = list(province_confirmed_cases)

for i in nan_indices:
    unique_provinces.pop(i)
    province_confirmed_cases.pop(i)

# number of cases per country/region
unique_countries = data[data.Confirmed>0]['Country'].unique()
unique_countries.sort()
unique_countries

# find unique dates
unique_dates = list(data['Last Update'].unique())
unique_dates.sort()
unique_dates

country_confirmed_cases = []
latest_date = adjusted_unique_dates[-1]
for i in unique_countries:   
    if i == 'Mainland China':
        country_confirmed_cases.append(data[data['Country']==i][data['Last Update']==latest_date].Confirmed.sum()) 
    else:
        index = -1
        while(True):
            if(len(data[data['Country']==i][data['Last Update']==unique_dates[index]])>0):
                country_confirmed_cases.append(data[data['Country']==i][data['Last Update']==unique_dates[index]].Confirmed.sum()) 
                break
            else:
                index -= 1

# number of cases per country/region
for i in range(len(unique_countries)):
    print(f'{unique_countries[i]}: {country_confirmed_cases[i]} cases')

# number of cases per province/state/city

for i in range(len(unique_provinces)):
    print(f'{unique_provinces[i]}: {province_confirmed_cases[i]} cases')

plt.figure(figsize=(10, 10))
plt.barh(unique_countries, country_confirmed_cases)
plt.title('# of Coronavirus Confirmed Cases in Countries/Regions')
plt.show()

plt.figure(figsize=(20, 15))
plt.barh(unique_provinces, province_confirmed_cases)
plt.title('# of Coronavirus Confirmed Cases in Provinces/States')
plt.show()

c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))
plt.figure(figsize=(20,20))
plt.pie(country_confirmed_cases, colors=c)
plt.legend(unique_countries, loc='best')
plt.show()

c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))
plt.figure(figsize=(20,20))
plt.pie(province_confirmed_cases, colors=c)
plt.legend(unique_provinces, loc='best')
plt.show()

print((1,2)+(3,5))
l={1:'ghj',2:'yk'}
l.clear()
print(l)
classd

